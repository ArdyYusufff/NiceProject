Tentu! Berikut adalah tutorial lengkap dan jelas langkah demi langkah untuk membuat sistem deteksi objek real-time menggunakan **Raspberry Pi 4**, **USB camera**, dan **TensorFlow Lite**, serta menampilkan hasilnya di **website melalui IP Raspberry Pi**.

---

## 🧰 Persiapan Alat & Bahan

### Perangkat Keras:

* Raspberry Pi 4 (disarankan 4GB atau 8GB RAM)
* microSD card (minimal 32GB, Class 10)
* USB Camera (yang kompatibel dengan UVC)
* Koneksi internet (Wi-Fi atau Ethernet)
* Catu daya untuk Raspberry Pi

### Perangkat Lunak:

* Raspberry Pi OS (Bookworm atau Bullseye)
* Python 3.7+
* TensorFlow Lite
* Flask (untuk web server)
* OpenCV
* Model TFLite (misal: `mobilenet_v1_1.0_224_quant.tflite`)
* Label file (misal: `labelmap.txt`)

---

## 🔧 Langkah-Langkah Instalasi & Konfigurasi

### 1. **Install Raspberry Pi OS**

1. Unduh [Raspberry Pi Imager](https://www.raspberrypi.com/software/)
2. Flash OS (disarankan Raspberry Pi OS Lite atau Desktop)
3. Boot Raspberry Pi, aktifkan SSH & Wi-Fi (jika perlu)

### 2. **Update Sistem**

```bash
sudo apt update && sudo apt upgrade -y
```

### 3. **Install Python dan Paket Pendukung**

```bash
sudo apt install python3-pip python3-opencv libatlas-base-dev -y
pip3 install numpy flask
```

### 4. **Install TensorFlow Lite**

```bash
pip3 install tflite-runtime
```

> Untuk Raspberry Pi, TFLite tidak diinstall dengan `tensorflow`, tapi dengan `tflite-runtime` (lebih ringan).

---

## 📷 Uji Kamera USB

```bash
ls /dev/video*
```

Biasanya muncul sebagai `/dev/video0`.

Tes dengan `fswebcam`:

```bash
sudo apt install fswebcam
fswebcam test.jpg
```

---

## 🧠 Download Model TFLite

Gunakan model seperti MobileNet SSD:

```bash
mkdir -p ~/tflite_model
cd ~/tflite_model

wget https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_ssd_mobilenet_v1_1_metadata_2.tflite -O model.tflite

wget https://raw.githubusercontent.com/tensorflow/examples/master/lite/examples/object_detection/raspberry_pi/labelmap.txt
```

---

## 🤖 Kode Python untuk Deteksi Objek

Simpan sebagai `detect.py`:

```python
import cv2
import numpy as np
import tflite_runtime.interpreter as tflite

# Load label
with open("labelmap.txt", "r") as f:
    labels = [line.strip() for line in f.readlines()]

# Load model
interpreter = tflite.Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
height = input_details[0]['shape'][1]
width = input_details[0]['shape'][2]

def detect_objects(frame):
    input_data = cv2.resize(frame, (width, height))
    input_data = np.expand_dims(input_data, axis=0)

    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()

    boxes = interpreter.get_tensor(output_details[0]['index'])[0]
    classes = interpreter.get_tensor(output_details[1]['index'])[0]
    scores = interpreter.get_tensor(output_details[2]['index'])[0]

    return boxes, classes, scores

```

---

## 🌐 Menampilkan Hasil ke Website (Flask App)

### 1. Struktur Folder:

```
project/
│
├── templates/
│   └── index.html
├── static/
│   └── styles.css (opsional)
├── detect.py
└── app.py
```

### 2. `templates/index.html`

```html
<!DOCTYPE html>
<html>
<head>
    <title>Deteksi Objek</title>
</head>
<body>
    <h2>Streaming Kamera - Deteksi Objek</h2>
    <img src="{{ url_for('video_feed') }}" width="640" height="480">
</body>
</html>
```

### 3. `app.py`

Gabungkan deteksi objek dan kamera real-time ke Flask:

```python
from flask import Flask, render_template, Response
import cv2
from detect import detect_objects, labels

app = Flask(__name__)
camera = cv2.VideoCapture(0)

def gen_frames():
    while True:
        success, frame = camera.read()
        if not success:
            break

        boxes, classes, scores = detect_objects(frame)

        imH, imW, _ = frame.shape
        for i in range(len(scores)):
            if scores[i] > 0.5:
                ymin = int(boxes[i][0] * imH)
                xmin = int(boxes[i][1] * imW)
                ymax = int(boxes[i][2] * imH)
                xmax = int(boxes[i][3] * imW)
                class_id = int(classes[i])
                label = labels[class_id]

                cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (10, 255, 0), 2)
                cv2.putText(frame, label, (xmin, ymin - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (10, 255, 0), 2)

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(gen_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
```

---

## 🚀 Jalankan Aplikasi

```bash
python3 app.py
```

Buka browser dan akses:

```
http://<IP-RASPBERRY-PI>:5000
```

Contoh:

```
http://192.168.1.10:5000
```

---

## 🔐 Opsional: Autostart saat boot

Buat service systemd agar otomatis jalan saat boot:

```bash
sudo nano /etc/systemd/system/object-web.service
```

Isi:

```ini
[Unit]
Description=Object Detection Web App
After=network.target

[Service]
ExecStart=/usr/bin/python3 /home/pi/project/app.py
WorkingDirectory=/home/pi/project
StandardOutput=inherit
StandardError=inherit
Restart=always
User=pi

[Install]
WantedBy=multi-user.target
```

Aktifkan:

```bash
sudo systemctl daemon-reexec
sudo systemctl enable object-web.service
sudo systemctl start object-web.service
```

---

## ✅ Selesai!

Kamu sekarang punya:

* Deteksi objek real-time dengan TensorFlow Lite
* Kamera USB
* Tampilan web live stream di browser
* Bisa diakses dari perangkat lain di jaringan

---

Jika kamu ingin:

* Menambahkan tombol/tampilan interaktif di web
* Menggunakan kamera CSI (Pi Camera)
* Menyimpan hasil deteksi ke file/log

Beritahu saja, saya siap bantu lanjutkan!

==============================================================================================================
dwonlod tutorial

Tentu! Untuk menggunakan **TensorFlow Lite (TFLite)** dengan model deteksi objek seperti **MobileNet SSD**, kamu perlu:

1. **Download model TFLite**
2. **Download labelnya**
3. (Opsional) Uji kompatibilitas model

Berikut adalah penjelasan **langkah demi langkah** agar jelas dan berhasil di Raspberry Pi 4:

---

## 🎯 Tujuan

Menggunakan model deteksi objek **SSD MobileNet V1** yang ringan dan cocok untuk Raspberry Pi + USB camera, dalam format **TensorFlow Lite** (`.tflite`).

---

## 🧠 Step-by-Step Download Model TFLite SSD MobileNet

### 📂 1. Buat Folder untuk Model

```bash
mkdir -p ~/tflite_model
cd ~/tflite_model
```

### 🌐 2. Download Model TFLite SSD MobileNet V1

Ini model pre-trained resmi dari TensorFlow (versi quantized untuk kecepatan optimal di Raspberry Pi):

```bash
wget https://storage.googleapis.com/download.tensorflow.org/models/tflite/task_library/object_detection/android/lite-model_ssd_mobilenet_v1_1_metadata_2.tflite -O model.tflite
```

> Penjelasan:
>
> * `wget`: untuk download file
> * `-O model.tflite`: menyimpan dengan nama yang mudah dipanggil

### 🏷️ 3. Download Label File (labelmap.txt)

File ini berisi nama-nama objek yang dikenali model:

```bash
wget https://raw.githubusercontent.com/tensorflow/examples/master/lite/examples/object_detection/raspberry_pi/labelmap.txt
```

Setelah ini, kamu akan punya dua file di folder `~/tflite_model/`:

```
model.tflite
labelmap.txt
```

---

## 📁 Struktur Akhir Folder

```
~/tflite_model/
├── model.tflite
└── labelmap.txt
```

---

## 🧪 4. Tes (Opsional)

Buka Python:

```bash
python3
```

Coba load model:

```python
import tflite_runtime.interpreter as tflite

interpreter = tflite.Interpreter(model_path="model.tflite")
interpreter.allocate_tensors()

print("Model loaded sukses!")
```

Jika tidak ada error: model berhasil dimuat!

---

Kalau kamu ingin alternatif model (misalnya: SSD Mobilenet V2, atau model custom), aku bisa bantu juga. Tapi model di atas adalah pilihan **paling stabil dan ringan** untuk Raspberry Pi.

Butuh saya lanjutkan ke integrasi kamera + model ini?

======================================================================================================================

Struktur lengkap dari project deteksi objek real-time dengan **Raspberry Pi 4**, **USB camera**, **TensorFlow Lite**, dan **Flask web server** akan seperti ini:

---

## 📁 Struktur Direktori Project Lengkap

Misalnya, kamu menyimpan semuanya di folder `~/object_detection_project/`, maka struktur file-nya adalah:

```
object_detection_project/
├── app.py                          # Web server Flask
├── detect.py                       # Fungsi deteksi objek dengan TFLite
├── labelmap.txt                    # Label dari model (class names)
├── model.tflite                    # Model TFLite SSD MobileNet
├── templates/
│   └── index.html                  # Tampilan web (HTML)
└── static/                         # (opsional, untuk CSS/gambar tambahan)
    └── styles.css                  # (opsional) gaya tampilan
```

---

## 🧾 Penjelasan Isi Masing-Masing File

| File / Folder          | Fungsi                                                    |
| ---------------------- | --------------------------------------------------------- |
| `app.py`               | Web app Flask yang menampilkan video + deteksi objek      |
| `detect.py`            | Skrip Python untuk memuat model dan melakukan inferensi   |
| `model.tflite`         | Model deteksi objek TensorFlow Lite                       |
| `labelmap.txt`         | Daftar nama label objek (misalnya: person, car, dog, dll) |
| `templates/index.html` | File HTML utama untuk halaman web                         |
| `static/styles.css`    | (Opsional) Tambahan CSS untuk desain                      |

---

## 🛠 Cara Membuat Struktur Ini

1. Masuk ke home folder:

   ```bash
   cd ~
   ```

2. Buat folder project:

   ```bash
   mkdir object_detection_project
   cd object_detection_project
   ```

3. Buat subfolder `templates` dan `static`:

   ```bash
   mkdir templates static
   ```

4. Pindahkan model ke folder ini:

   ```bash
   mv ~/tflite_model/model.tflite .
   mv ~/tflite_model/labelmap.txt .
   ```

5. Buat file berikut (gunakan `nano` atau text editor lain):

   * `app.py`
   * `detect.py`
   * `templates/index.html`

---

## 📦 Contoh Cepat Buat File

Contoh membuat `app.py`:

```bash
nano app.py
```

Isi dengan script Flask yang sudah saya berikan sebelumnya.

---

Kalau kamu mau, saya bisa bantu buatkan isi lengkap semua file (`app.py`, `detect.py`, `index.html`) sekarang juga. Cukup katakan: **"Lanjutkan isi semua file lengkapnya"** dan saya akan tampilkan semuanya langsung.
